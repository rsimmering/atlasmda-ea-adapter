package ${target.namespace};

public class ${type.name} {

#foreach($property in $type.properties)
    private $property.type $property.name;
#end
#foreach($property in $type.properties)

    /**
     * Get the ${property.name} of the ${type.name}
     * @return ${property.name}
     * @see ${property.type}
     */
    public ${property.type} get${util.capitalize(${property.name})}() {
        return $property.name;
    }

    /**
     * Set the ${property.name} of the ${type.name}
     * @param ${property.name} The ${property.name}
     * @see ${property.type}
     */
    public void set${util.capitalize(${property.name})}(${property.type} ${property.name}) {
        this.${property.name} = ${property.name};
    }
#end
#foreach($op in $type.operations)

    /**
#if(${util.isBlank(${op.documentation})})
     * ${op.name}
#else
     * ${op.documentation}
#end
#foreach($p in ${op.parameters})
     * @param ${p.name}
#end
#if(!${op.getReturnType().equals("void")})
     * @return ${op.returnType}
#end
#foreach($p in ${op.parameters})
     * @see ${p.type}
#end
     */
    public ${op.returnType} ${op.name}(#foreach($p in ${op.parameters})${p.type} ${p.name}#if($velocityHasNext), #end#end) {
        //TO-DO: Business logic here
    }
#end

}