package ${target.getProperty("namespace")};

#if($type.hasMany())
import java.util.List;
import java.util.ArrayList;
#end
#if(${util.isBlank(${type.getGeneralization()})})
import java.io.Serializable;
#end

#if(${util.isBlank(${type.getGeneralization()})})
public abstract class ${type.name}Base implements Serializable {
#else
public abstract class ${type.name}Base extends ${type.generalization} {
#end
#if(${util.isBlank(${type.getGeneralization()})})
    
    private Long id;
#else

#end
#foreach($property in $type.properties)
    private $property.type $property.name;
#end
#foreach($ass in ${type.getOneToMany()})
#if(${ass.isOwner()})
    private List<${ass.entity.name}> ${ass.name}List;
#else
    private ${ass.entity.name} ${ass.name};
#end
#end
#foreach($ass in ${type.getManyToOne()})
    private ${ass.entity.name} ${ass.name};
#end
#foreach($ass in ${type.getManyToMany()})
    private List<${ass.entity.name}> ${ass.name}List;
#end
#foreach($ass in ${type.getOneToOne()})
    private ${ass.entity.name} ${ass.name};
#end
#if(${util.isBlank(${type.getGeneralization()})})

    /**
     * Get the id of the ${type.name}
     * @return id
     * @see Long
     */
    public Long getId() {
        return id;
    }

    /**
     * Set the id of the ${type.name}
     * @param id The id
     * @see Long
     */
    public void setId(Long id) {
        this.id=id;
    }
#end
#foreach($property in $type.properties)

    /**
     * Get the ${property.name} of the ${type.name}
     * @return ${property.name}
     * @see ${property.type}
     */
    public ${property.type} get${util.capitalize(${property.name})}() {
        return $property.name;
    }

    /**
     * Set the ${property.name} of the ${type.name}
     * @param ${property.name} The ${property.name}
     * @see ${property.type}
     */
    public void set${util.capitalize(${property.name})}(${property.type} ${property.name}) {
        this.${property.name} = ${property.name};
    }
#end

#parse("entity.one.to.many.vm")
#parse("entity.many.to.many.vm")
#parse("entity.many.to.one.vm")
#parse("entity.one.to.one.vm")

    /**
     * Answer whether an instance of ${type.name} is equal to this
     * @return true or false
     */
    @Override
    public boolean equals(${type.name} instance) {
        return this.id.equals(instance.getId());
    }

}